library(broom)
library(openintro)
library(knitr)
# Set numerical output display parameters
options(width=70, digits=4, scipen=8)
# Set R output size a bit smaller than default
knitr::opts_chunk$set(size='small', prompt=FALSE, comment="")
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
x <- c(1,3,5,7)
y <- c(578,317,203,118)
xyplot(y~x, xlab="time (minutes)", ylab="particle counts",abline=list(lm(y~x)))
x <- c(1,3,5,7)
y <- c(578,317,203,118)
xyplot(y~x, xlab="time (minutes)", ylab="particle counts",abline=list(lm(y~x)))
x <- c(1,3,5,7)
y <- c(578,317,203,118)
xyplot(y~x, xlab="time (minutes)", ylab="particle counts",abline=list(lm(y~x)))
cor(y,x)
x <- c(1,3,5,7)
y <- c(578,317,203,118)
xyplot(y~x, xlab="time (minutes)", ylab="particle counts",abline=list(lm(y~x)))
cor(y,x)
logy <- log(y)
xyplot(logy~x, xlab="time (minutes)", ylab="log(counts)",abline=list(lm(logy~x)))
cor(logy, x)
x <- seq(0.5215,1.286)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standar Normal Distribution Curve", axes = FALSE)
x <- seq(0.5215,1.286)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standar Normal Distribution Curve", axes = FALSE)
library(MASS)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(openintro)
x <- seq(0.5215,1.286)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve", axes = FALSE)
x <- seq(0.5215,1.286)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve", axes = FALSE)
x <- seq(0.5215,1.286)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(0.5215,1.286,length=1000)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(0.5215,1.286,length=1000)
y <- dnorm(x,0,1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve", axis=FALSE)
x <- seq(0.5215,1.286,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="n", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(0.5215,1.286,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(-1,1,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(-3,0.5215,1.286,3,length=1000)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
points(1.286,0)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
points(1.286,y)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
points(1.286)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
abline(v=1.286)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
abline(v=1.286)
abline(v=0.5215)
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve", abline(v=1,286))
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve", abline(v=1.286))
x <- seq(-3,3,length=1000)
y <- dnorm(x,mean=0,sd=1)
plot(x, y, type="l", xlab = "z-scores", ylab = "", main = "Standard Normal Distribution Curve")
abline(v=1.286)
abline(v=0.5215)
pt(1.91,10)
pt(-3.45,16)
2*pt(0.83,6)
pt(0.83,6)
pt(0.83,6)
pt(2.13,27)
pt(3.45,16)
qt(0.025,35)
pt(1.75,24)
library(MASS)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(openintro)
2*pnorm(-0.87)
2*pt(-0.87,199)
qt(0.025,199)
2*pt(-3.30,50)
qt(0.01,50)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
median(IQ ~ Gender, data = mydata)
mean(IQ ~ Gender, data = mydata)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(MASS)
library(openintro)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
qt(0.05,12)
1-pt(1.00792,12)
2*(1-pt(0.05,12))
2*(1-pt(1.00792,12))
2*pt((4.162-5)/3.355,12)
2*pt(-0.25,12)
2*pt((4.162-5)/3.355,12)
2*pt(-0.25,12)
qt(0.005,12)
nrow(data2.4)
2*(1-pt(1.41))
2*(1-pt(1.41,9))
cov5 = cov(data2.11$Husband,data2.11$Wife)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(MASS)
library(openintro)
library(ggplot2)
library(ggformula)
library(car)
library(knitr)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
2*(1-pt(4.24,9))
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(MASS)
library(openintro)
library(ggplot2)
library(ggformula)
library(car)
library(knitr)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
qt(0.0824*2,18)
qt(0.0412,18)
qt(0.0412,18)
pf(22.98,4)
pf(22.98,4,88)
pf(22.98,4,89)
pf(22.98,89,4)
pf(22.98,4,89)
pf(22.98,4,88)
pf(20.46,3,88)
1-pf(22.98,4,88,lower.tail = FALSE)
1-pf(22.98,4,88,lower.tail = FALSE)
1-pf(22.98,4,88)
1-pf(20.46,3,88)
qt(0.025,48)
qt(0.025,48)
qt(0.025,48)
0.0189-2.011*0.0102
0.0189+2.011*0.0102
55.3+28.6*4.19+4507*0.0189+12.8*0.334+41.4*(-3.24)
install.packages(dummies)
install.packages("dummies")
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(MASS)
library(openintro)
library(ggplot2)
library(ggformula)
library(car)
library(knitr)
library(GGally)
library(dummies)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
fertilizer = read.delim("http://statistics.uchicago.edu/~collins/data/RABE5/P158.txt")
F1 = ((1390.31-1319.85)/(85-82))/(1319.85/82)
F1
1-pf(F1,3,85)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(MASS)
library(openintro)
library(ggplot2)
library(ggformula)
library(car)
library(knitr)
library(GGally)
library(dummies)
options(width=70, digits=4, scipen=8)
# def.chunk.hook  <- knitr::knit_hooks$get("chunk")
# knitr::knit_hooks$set(chunk = function(x, options) {
#   x <- def.chunk.hook(x, options)
#   ifelse(options$size != "normalsize", paste0("\\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
# })
knitr::opts_chunk$set(size='small') # Set the default R output size a bit smaller
# set plot theme to black and white
ggplot2::theme_set(ggplot2::theme_bw())
ggplot2::theme_update(panel.grid.major = ggplot2::element_line(colour = "grey75"))
fertilizer = read.delim("http://statistics.uchicago.edu/~collins/data/RABE5/P158.txt")
education = read.delim("http://statistics.uchicago.edu/~collins/data/RABE5/P151-153.txt")
diamond = read.delim("http://statistics.uchicago.edu/~collins/data/s224/diamonds.txt")
F1 = ((1390.31-1319.85)/(85-82))/(1319.85/82)
F1
1-pf(F1,3,82)
reduced = lm(log(y) ~ x1 + x2 + x3 + year + Midwest + South + West, data=education)
install.packages("tseries")
install.packages("orcutt")
1+2
View(bob)
x <- 5
is.numeric("2")
is.character("2")
is.logical(1)
is.logical(TRUE)
as.numeric("2")
as.character(2)
as.logical(1)
v3 <- matrix(v1,nrow=4,ncol=4,byrow=TRUE)
v1 <- 1:16
v1
v2 <- matrix(v1,nrow=4,ncol=4)
v2
v3
v3
v3 <- matrix(v1,nrow=4,ncol=4,byrow=TRUE)
v3
v4 <- matrix(0,4,4)
v4
v5 <- c("one", "two", "three", "four")
v5
v6 <- matrix(v5,2)
v6
dim(v6)
ob1[[1]]
ob1 <- list(x=1,y=2,z=3)
ob1[[1]]
ob2[[2]][[2]]
ob2 <- list(w=4, ob1)
ob2[[2]][[2]]
day <- list(month="August",date=7)
View(day)
day[[1]]
c1
c1 <- seq(10,50,10)
c1
c2 <- seq(60,100,10)
m <- matrix(c1,c2)
View(m)
View(m)
m
m <- matrix(c1,ncol=2)
m
m <- matrix(c1,nrow=5, ncol=2)
m
c1 <- seq(10,100,10)
m <- matrix(c1,nrow=5, ncol=2)
m
d <- data.frame(m)
d
d %>%
rename(
X1 = Inc,
X2 = Rev
)
names(d)[names(d) == "X2"] <- "Rev"
names(d)[names(d) == "X1"] <- "Inc"
d
read.csv(/Desktop/Community_Pop.csv)
library(readr)
Community_Pop <- read_csv("Desktop/Community_Pop.csv")
View(Community_Pop)
read.csv(~/Desktop/Community_Pop.csv)
View(Community_Pop)
read.csv(Community_Pop)
read.csv("Community_Pop")
read.csv("~/Desktop/Community_Pop.csv")
file <- read.csv("~/Desktop/Community_Pop.csv")
file
summary(file)
file[["POP2010"]]
maximum <- max(pop2010)
pop2010
pop2010 <- file[["POP2010"]]
pop2010
max(pop2010)
pop2010 <- file[["POP2010"]]
max(pop2010)
km2miles <- function(km) {
return(1.609344*km)
}
km2miles(3)
install.packages('Seurat')
library(Seurat)
library(foreign)
library(tidyverse)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
tm_shape(nc) + tm_fill(“BIR79”, style = “pretty”)
library(tmap)
tm_shape(nc) + tm_fill(“BIR79”, style = “pretty”)
tm_shape(nc) + tm_polygons("BIR79")
tm_shape(nc) + tm_polygons("BIR79",style="pretty")
tm_shape(nc) + tm_polygons("BIR79",style="jenks")
tm_shape(nc) + tm_fill("BIR79",style="jenks")
tm_shape(nc) + tm_fill("BIR79",style="equal")
tm_shape(nc) + tm_fill("BIR79",style="sd")
tm_shape(nc) + tm_fill("BIR79",style="standard")
tm_shape(nc) + tm_fill("BIR79",style="equal frequency")
tm_shape(nc) + tm_fill("BIR79",style="quantile")
tm_shape(nc) + tm_fill("BIR79",style="fixed")
tm_shape(nc) + tm_fill("BIR79",style="quantile")
tm_shape(nc) + tm_fill("BIR79",style="kmeans")
# Load some commonly used packages.
# If you get a "package not found" error,
# then follow the instructions for installing packages at
# http://statistics.uchicago.edu/~collins/Rinstall/
library(MASS)
library(gridExtra)
library(tidyverse)
library(mosaic)
library(broom)
library(openintro)
YTM <- function(r, T, parvalue, couprate, pr) {coupon * (1 / r * (1 - 1 / (1 + r) ^ T)) + par / (1 + r) ^ T - price}
YTM_function <- function(r, T, parvalue, couprate, pr) {coupon * (1 / r * (1 - 1 / (1 + r) ^ T)) + par / (1 + r) ^ T - price}
YTM <- function(T, par, coupon, price) {uniroot(ytm_eqn, lower = 0.0001, upper = 1, tol = 0.0001, T = T, par = par,
coupon = coupon, price = price)$root}
YTM(5,1000,30,985)
YTM_function <- function(r, T, par, coupon, price) {coupon * (1 / r * (1 - 1 / (1 + r) ^ T)) + par / (1 + r) ^ T - price}
YTM <- function(T, par, coupon, price) {uniroot(ytm_eqn, lower = 0.0001, upper = 1, tol = 0.0001, T = T, par = par,
coupon = coupon, price = price)$root}
YTM(5,1000,30,985)
YTM_function <- function(r, T, par, coupon, price) {coupon * (1 / r * (1 - 1 / (1 + r) ^ T)) + par / (1 + r) ^ T - price}
YTM <- function(T, par, coupon, price) {uniroot(ytm_eqn, lower = 0.0001, upper = 1, tol = 0.0001, T = T, par = par,
coupon = coupon, price = price)$root}
YTM(5,1000,30,985)
library(ggplot2)
library(sf)
library(rnaturalearth)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
library(rnaturalearth)
library(rnaturalearthdata)
library(googleway)
install.packages("googleway")
library(googleway)
install.packages("ggspatial")
library(ggspatial)
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-102.15, -74.12), ylim = c(7.65, 33.97), expand = FALSE)
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$NAME)), " countries)"))
ggplot(data = world) +
geom_sf(color = "black", fill = "lightgreen")
library(spData)
install.packages("spData")
library(spData)
library(dplyr)
plot(world)
head(world)
library(foreign)
library(tidyverse)
library(sf)
library(tmap)
library(RColorBrewer)
library(broom)
library(ggplot2)
library(spData)
library(dplyr)
head(world)
plot(world[,gdpPercap])
plot(world[,"gdpPercap"])
plot(world[,"gdpPercap"])
library(spData)
library(foreign)
library(tidyverse)
library(ggplot2)
library(spData)
library(dplyr)
plot(world)
library(foreign)
library(tidyverse)
library(ggplot2)
library(spData)
library(dplyr)
head(world)
plot(world[,"gdpPercap"])
library(foreign)
library(tidyverse)
library(ggplot2)
library(spData)
library(dplyr)
head(world)
small_countries <- subset(world, area_km2<10000)
world[,area_km2]
world[,"area_km2"]
small_countries <- subset(world, world$area_km2<10000)
# small Asian countries
small_Asian_countries <- subset(world, (world$area_km2<10000)&(world$continent=="Asia"))
small_Asian_countries
small_Asian_countries[,"name"]
small_Asian_countries["name"]
small_Asian_countries
plot(small_Asian_countries)
small_Asian_countries
# small Asian countries
small_Asian_countries <- subset(world, (world$area_km2<10000)&(world$continent=="Asia"))
small_Asian_countries
# Subset: identify small countries
small_countries <- subset(world, world$area_km2<10000)
small_countries
setwd("/Users/jennifersun/Desktop/BioTIP")
devtools::document()
q()
