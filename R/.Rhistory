cor.shrink = function(X,  Y=NULL,  MARGIN = c(1,  2),  shrink = TRUE,
target = c('zero',  'average', 'half'))
{
# MARGIN = match.arg(MARGIN)
# target = match.arg(target)
if (class(target)=='numeric') if((target < 0) | (target > 1)) { # make sure we have a valid target for off-diagonal correlations
stop("Argument `target` must be a value between 0 and 1, or a choice of 'zero',  'average', 'half'")
} else if(class(target)=='character') if(!target %in% c('zero',  'average', 'half')) {
stop("Argument `target` must be a value between 0 and 1, or a choice of 'zero',  'average', 'half'")
}
dim_X = dim(X)
dim_Y = dim(Y)
Y.exist = FALSE
if(!is.null(Y)){
if(MARGIN==1) {
X <- rbind(X, Y)
Y.exist = TRUE  # a flag for outputs
} else {
X <- cbind(X, Y)
}
}
# center and scale X by mean and SD (using wither column or row means/SDs)
X_means = apply(X,  MARGIN = MARGIN,  mean,  na.rm = TRUE)
X_sds = apply(X,  MARGIN = MARGIN,  sd,  na.rm = TRUE)
X_sds[X_sds == 0] = 1 # in case where variable doesn't vary
X_std = sweep(sweep(X,  MARGIN = MARGIN,  STATS = X_means,  FUN = '-'),
MARGIN = MARGIN,  STATS = X_sds,  FUN = '/')
# From now on Y is a new internal matrix regardless the input Y ###
rm(Y) #update on 9/29/2020
Y = !is.na(X_std) # contains pattern of non-missing values
X_std[!Y] = 0 # set missing to 0 to not add to (t)crossprod (but # of not missing encoded in Y)
# calculate quantities needed
if (MARGIN == 1) {
XtX = tcrossprod(X_std)
X2tX2 = tcrossprod(X_std^2)
YtY = tcrossprod(Y)
} else {
XtX = crossprod(X_std)
X2tX2 = crossprod(X_std^2)
YtY = crossprod(Y)
}
# calculate empirical correlation
X_cor = XtX / (pmax(1,  YtY - 1, na.rm=TRUE))
X_cor_shrink = X_cor # initialize with empirical correlation
U = upper.tri(XtX,  diag = FALSE) # index on U to get upper triangular part of matrix
if (shrink) { # if we're shrinking,  find lambda and shrink towards specified target
numerator = sum(((YtY[U] * X2tX2[U]) - (XtX[U])^2) / ((pmax(1,  YtY[U] - 1))^3), na.rm=TRUE)
# BEGIN translate character to numeber
if (target == 'zero') {
target = 0
} else {
if(target == 'half') {
target = 0.5
} else {
target = mean(X_cor[U])
}
}
denominator = sum((X_cor[U]-target)^2)   #update on 9/29/2020
lambda = ifelse(shrink,  max(0,  min(1,  numerator / denominator), na.rm=TRUE),  0)
target_cor = matrix(target, nrow = nrow(X_cor), ncol = ncol(X_cor))
diag(target_cor) = 1
X_cor_shrink = (lambda * target_cor) + ((1 - lambda) * X_cor)
}
#   cat(dim(X_cor), '\t')
if(Y.exist){
X_cor_shrink = X_cor_shrink[1:dim_X[MARGIN], (dim_X[MARGIN] + 1):(dim_X[MARGIN] + dim_Y[MARGIN])]  #update on 9/29/2020
}
return(X_cor_shrink)
}
target_cor = matrix(0,5,3,3)
target_cor
target_cor(0.5,3,3)
target_cor = matrix(0.5,3,3)
target_cor
diag(target_cor)=1
target_cor
rm(target_cor)
target_cor
?rm
target_cor = matrix(0.5,3,3)
mean(target_cor)
upper.tri(crossprod(target_cor),diag=FALSE)
crossprod(target_cor)
!is.na(target_cor)
Y=!is.na(target_cor)
U=upper.tri(crossprod(target_cor),diag=FALSE)
Y[U]
?pmax
?pmax
